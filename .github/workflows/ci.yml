name: Push Artifact to AWS CodeArtifact

on:
  push:
    branches: [ "main" ]
    
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env: 
      DOMAIN: py-domain
      REPOSITORY: py-repo
      REGION: us-east-1
      PACKAGE_VERSION: 1.0.1
      PACKAGE_NAME: main.tar
      NAMESPACE: py_generic_artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: zipping python source-code with tar
        run: |
          tar -cvf main.tar main.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}} 

      - name: Configure pip for CodeArtifact
        run: |
          aws codeartifact login --tool pip --repository ${{env.REPOSITORY}} --domain ${{env.DOMAIN}}

      - name: Generate CodeArtifact Authorization Token
        run: |
          aws codeartifact get-authorization-token --domain ${{env.DOMAIN}} --query authorizationToken --output text
      
      ## add condition##
      - name: Check existing package versions
        id: check_versions
        run: |
          existing_versions=$(aws codeartifact list-package-versions --domain ${{ env.DOMAIN }} --repository ${{ env.REPOSITORY }} --package ${{ env.PACKAGE_NAME }} --format generic --namespace ${{env.NAMESPACE}})
          echo "$existing_versions" > existing_versions.json
          echo "::set-output name=existing_versions::$existing_versions"

      - name: Debug JSON output
        run: |
          cat existing_versions.json  # Print for debugging

      - name: Parse existing versions
        id: parse_versions
        run: |
          versions=$(jq -r '.versions[]' existing_versions.json)
          echo "::set-output name=versions_list::$versions"

      # - name: Check existing package versions
      #   id: check_versions
      #   run: |
      #     existing_versions=$(aws codeartifact list-package-versions --domain ${{ env.DOMAIN }} --repository ${{ env.REPOSITORY }} --package ${{ env.PACKAGE_NAME }} --format generic --namespace ${{env.NAMESPACE}})
      #     echo "$existing_versions"
      #     echo "::set-output name=existing_versions::$existing_versions"
  
      # - name: Debug JSON output
      #   run: |
      #     echo "${{ steps.check_versions.outputs.existing_versions }}" > existing_versions.json
      #     cat existing_versions.json  # Print for debugging

      # - name: Parse existing versions
      #   id: parse_versions
      #   run: |
      #     versions=$(jq -r '.versions[]' existing_versions.json)
      #     echo "::set-output name=versions_list::$versions"
  
      # - name: Parse existing versions
      #   id: parse_versions
      #   run: |
      #     echo "${{ steps.check_versions.outputs.existing_versions }}" > existing_versions.json
      #     cat existing_versions.json  # Optional: Print for debugging
      #     jq -r '.versions[]' existing_versions.json > versions_list.txt
      #     echo "::set-output name=versions_list::$(cat versions_list.txt)"
  
      - name: Check if version exists
        id: version_check
        run: |
          if grep -q "${{ env.PACKAGE_VERSION }}" versions_list.txt; then
            echo "Version ${PACKAGE_VERSION} already exists. Skipping publish."
            echo "::set-output name=version_exists::true"
          else
            echo "Version ${PACKAGE_VERSION} does not exist. Proceeding with publish."
            echo "::set-output name=version_exists::false"
          fi

      - name: Calculate SHA256 hash
        id: sha256
        run: |
          sha256sum ${{env.PACKAGE_NAME}} > main.sha256
          cat main.sha256
          echo "::set-output name=sha256::$(awk '{print $1}' main.sha256)"

      - name: Publish to CodeArtifact
        run: | 
          aws codeartifact publish-package-version \
          --domain ${{env.DOMAIN}} \
          --repository ${{env.REPOSITORY}} \
          --format generic \
          --package ${{env.PACKAGE_NAME}} \
          --package-version ${{env.PACKAGE_VERSION}} \
          --asset-name ${{env.PACKAGE_NAME}} \
          --asset-content ./${{env.PACKAGE_NAME}} \
          --asset-sha256 "${{ steps.sha256.outputs.sha256 }}" \
          --namespace ${{env.NAMESPACE}} \
          --region ${{env.REGION}}
          